/**
 * JavaCC VCPU32Parser file created by yuxuanchiadm
 */
options
{
    JDK_VERSION = "1.8";
    UNICODE_INPUT = true;
    STATIC = false;
    DEBUG_PARSER = false;
    TOKEN_FACTORY = "org.apcdevpowered.vcpu32.asm.TokenFactory";
    
    JTB_P = "org.apcdevpowered.vcpu32.asm.parser";
    JTB_F = true;
    JTB_IA = true;
    JTB_JD = true;
    JTB_TK = true;
}

PARSER_BEGIN(VCPU32Parser)
package org.apcdevpowered.vcpu32.asm.parser;

import java.io.StringReader;

import org.apcdevpowered.vcpu32.asm.parser.visitor.*;

public class VCPU32Parser
{
    public static AbstractSyntaxTree parser(String sourceCode) throws ParseException
    {
        VCPU32Parser parser = new VCPU32Parser(new StringReader(sourceCode));
        return parser.AbstractSyntaxTree();
    }
}
PARSER_END(VCPU32Parser)

SPECIAL_TOKEN :
{
    < Space : (" "|"\r"|"\n"|"\t")+ >
|   < Annotate : ";" (~["\n","\r"])* >
}

//Identifier
TOKEN :
{
    < #Id: <Id_Letter>(<Id_Letter>|<Id_Digit>)* >
|
    < #Id_Letter:
        [
            "\u0024",
            "\u0041"-"\u005a",
            "\u005f",
            "\u0061"-"\u007a",
            "\u00c0"-"\u00d6",
            "\u00d8"-"\u00f6",
            "\u00f8"-"\u00ff",
            "\u0100"-"\u1fff",
            "\u3040"-"\u318f",
            "\u3300"-"\u337f",
            "\u3400"-"\u3d2d",
            "\u4e00"-"\u9fff",
            "\uf900"-"\ufaff"
        ]
    >
|
    < #Id_Digit:
        [
            "\u0030"-"\u0039",
            "\u0660"-"\u0669",
            "\u06f0"-"\u06f9",
            "\u0966"-"\u096f",
            "\u09e6"-"\u09ef",
            "\u0a66"-"\u0a6f",
            "\u0ae6"-"\u0aef",
            "\u0b66"-"\u0b6f",
            "\u0be7"-"\u0bef",
            "\u0c66"-"\u0c6f",
            "\u0ce6"-"\u0cef",
            "\u0d66"-"\u0d6f",
            "\u0e50"-"\u0e59",
            "\u0ed0"-"\u0ed9",
            "\u1040"-"\u1049"
        ]
    >
}

TOKEN :
{
    < Opt : ("DUP"|"SHR"|"FMOD"|"IFE"|"CRT"|"FIFA"|"XOR"|"FSUB"|"SWAP"|"SHL"|"MOD"|"IFA"|"GTH"|"GDT"|"IFU"|"FDIV"|"SUB"|"SET"|"ITF"|"FMUL"|"INS"|"AND"|"IFN"|"FTI"|"MUL"|"PUSH"|"UNMP"|"SLT"|"CLCK"|"DLCK"|"GLCK"|"RLCK"|"WLCK"|"NLCK"|"OUTS"|"MIOP"|"RET"|"STT"|"IN"|"OUT"|"FADD"|"POP"|"EXT"|"BOR"|"FIFU"|"CALL"|"ASR"|"FIFN"|"DIV"|"JSR"|"FIFE"|"ADD"|"STRAT"|"DATAT"|"DAT"|"GPL"|"GSO") >
|   < Reg : "A"|"B"|"C"|"I"|"J"|"X"|"Y"|"Z"|"O"|"PC"|"SP" >
|   < Hex : "0" ("x"|"X") (["0"-"9","A"-"F"])+ >
|   < Real : ("-")? (["0"-"9"])* "." (["0"-"9"])* >
|   < Dec : ("-")? ((["1"-"9"] (["0"-"9"])*)|"0") >
|   < Oct : "0" (["0"-"7"])+ >
|   < Bin :  "0" ("b"|"B") ("0"|"1")+ >
|   < Char : "'"(("\\"("b"|"f"|"n"|"r"|"t"|"\""|"'"|"\\"|"u"(["0"-"9","a"-"f","A"-"F"]){4}))|~["\\","'"])"'" >
|   < String : "\""(("\\"("b"|"f"|"n"|"r"|"t"|"\""|"'"|"\\"|"u"(["0"-"9","a"-"f","A"-"F"]){4}))|~["\\","\""])*"\"" >
|   < Label : <Id> >
|   < LabelBegin : ":" >
|   < MemBegin : "[" >
|   < MemEnd : "]" >
|   < Comma : "," >
}

void AbstractSyntaxTree() :
{} 
{
    (StmList())? <EOF>
}
void StmList() :
{} 
{
    Stm() (
    {
        if(token.next == null)
        {
            token.next = token_source.getNextToken();
        }
        Token specialToken = token.next.specialToken;
        if(specialToken == null || specialToken.kind != Space)
        {
            int[][] exptokseq = new int[][]{{Space}};
            throw new ParseException(token, exptokseq, tokenImage);
        }
    }
    StmList())?
}
void Stm() :
{} 
{
    Insn()
|   LabelDef()
}
void Insn() :
{}
{
    <Opt> (
    {
        if(token.next == null)
        {
            token.next = token_source.getNextToken();
        }
        Token specialToken = token.next.specialToken;
        if(specialToken == null || specialToken.kind != Space)
        {
            int[][] exptokseq = new int[][]{{Space}};
            throw new ParseException(token, exptokseq, tokenImage);
        }
    }
    ParList())?
}
void LabelDef() :
{}
{
    <LabelBegin> <Label>
}
void ParList() :
{} 
{
    Par() (<Comma> ParList())?
}
void Par() :
{} 
{
    <Dec>
|   <Hex>
|   <Oct>
|   <Bin>
|   <Reg>
|   <MemBegin> (<Reg>|<Dec>|<Hex>|<Oct>|<Bin>|<Label>) <MemEnd>
|   <String>
|   <Char>
|   <Label>
|   <Real>
}
