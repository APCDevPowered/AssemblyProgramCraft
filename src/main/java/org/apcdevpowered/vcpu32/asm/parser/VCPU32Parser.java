/* Generated By:JavaCC: Do not edit this line. VCPU32Parser.java */
package org.apcdevpowered.vcpu32.asm.parser;

import java.io.StringReader;

import org.apcdevpowered.vcpu32.asm.parser.syntaxtree.*;
import org.apcdevpowered.vcpu32.asm.parser.visitor.*;


public class VCPU32Parser implements VCPU32ParserConstants {

  /* --- User code --- */

  public static AbstractSyntaxTree parser(String sourceCode) throws ParseException{
    VCPU32Parser parser = new VCPU32Parser(new StringReader(sourceCode));
    return parser.AbstractSyntaxTree();
  }

  final public AbstractSyntaxTree AbstractSyntaxTree() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  StmList n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Opt:
    case LabelBegin:
      n1 = StmList();
      n0.addNode(n1);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    n3 = jj_consume_token(0);
    n3.beginColumn++;
    n3.endColumn++;
    { n2 = JTBToolkit.makeNodeToken(n3); }
    {if (true) return new AbstractSyntaxTree(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public StmList StmList() throws ParseException {
  // --- JTB generated node declarations ---
  Stm n0 = null;
  NodeOptional n1 = new NodeOptional();
  StmList n2 = null;
    n0 = Stm();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Opt:
    case LabelBegin:
      if (token.next == null) {
        token.next = token_source.getNextToken();
      }
      Token specialToken = token.next.specialToken;
      if (specialToken == null || specialToken.kind != Space) {
        int[][] exptokseq = new int[][]{ { Space } };
        {if (true) throw new ParseException(token, exptokseq, tokenImage);}
      }
      n2 = StmList();
      n1.addNode(n2);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    {if (true) return new StmList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public Stm Stm() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Insn n1 = null;
  LabelDef n2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Opt:
      n1 = Insn();
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case LabelBegin:
      n2 = LabelDef();
      n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Stm(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Insn Insn() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  ParList n3 = null;
    n1 = jj_consume_token(Opt);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Reg:
    case Hex:
    case Real:
    case Dec:
    case Oct:
    case Bin:
    case Char:
    case String:
    case Label:
    case MemBegin:
      if (token.next == null) {
        token.next = token_source.getNextToken();
      }
      Token specialToken = token.next.specialToken;
      if (specialToken == null || specialToken.kind != Space) {
        int[][] exptokseq = new int[][]{ { Space } };
        {if (true) throw new ParseException(token, exptokseq, tokenImage);}
      }
      n3 = ParList();
      n2.addNode(n3);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    {if (true) return new Insn(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public LabelDef LabelDef() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
    n1 = jj_consume_token(LabelBegin);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(Label);
    n2 = JTBToolkit.makeNodeToken(n3);
    {if (true) return new LabelDef(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public ParList ParList() throws ParseException {
  // --- JTB generated node declarations ---
  Par n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ParList n5 = null;
    n0 = Par();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Comma:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(Comma);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = ParList();
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    {if (true) return new ParList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public Par Par() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeChoice n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Dec:
      n2 = jj_consume_token(Dec);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 10);
      break;
    case Hex:
      n4 = jj_consume_token(Hex);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 10);
      break;
    case Oct:
      n6 = jj_consume_token(Oct);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 10);
      break;
    case Bin:
      n8 = jj_consume_token(Bin);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 3, 10);
      break;
    case Reg:
      n10 = jj_consume_token(Reg);
      n9 = JTBToolkit.makeNodeToken(n10);
      n0 = new NodeChoice(n9, 4, 10);
      break;
    case MemBegin:
      n11 = new NodeSequence(3);
      n13 = jj_consume_token(MemBegin);
      n12 = JTBToolkit.makeNodeToken(n13);
      n11.addNode(n12);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Reg:
        n16 = jj_consume_token(Reg);
          n15 = JTBToolkit.makeNodeToken(n16);
          n14 = new NodeChoice(n15, 0, 5);
        break;
      case Dec:
        n18 = jj_consume_token(Dec);
          n17 = JTBToolkit.makeNodeToken(n18);
          n14 = new NodeChoice(n17, 1, 5);
        break;
      case Hex:
        n20 = jj_consume_token(Hex);
          n19 = JTBToolkit.makeNodeToken(n20);
          n14 = new NodeChoice(n19, 2, 5);
        break;
      case Oct:
        n22 = jj_consume_token(Oct);
          n21 = JTBToolkit.makeNodeToken(n22);
          n14 = new NodeChoice(n21, 3, 5);
        break;
      case Bin:
        n24 = jj_consume_token(Bin);
          n23 = JTBToolkit.makeNodeToken(n24);
          n14 = new NodeChoice(n23, 4, 5);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n11.addNode(n14);
      n26 = jj_consume_token(MemEnd);
      n25 = JTBToolkit.makeNodeToken(n26);
      n11.addNode(n25);
      n0 = new NodeChoice(n11, 5, 10);
      break;
    case String:
      n28 = jj_consume_token(String);
      n27 = JTBToolkit.makeNodeToken(n28);
      n0 = new NodeChoice(n27, 6, 10);
      break;
    case Char:
      n30 = jj_consume_token(Char);
      n29 = JTBToolkit.makeNodeToken(n30);
      n0 = new NodeChoice(n29, 7, 10);
      break;
    case Label:
      n32 = jj_consume_token(Label);
      n31 = JTBToolkit.makeNodeToken(n32);
      n0 = new NodeChoice(n31, 8, 10);
      break;
    case Real:
      n34 = jj_consume_token(Real);
      n33 = JTBToolkit.makeNodeToken(n34);
      n0 = new NodeChoice(n33, 9, 10);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Par(n0);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public VCPU32ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10040,0x10040,0x10040,0x2ff80,0x80000,0x1d80,0x2ff80,};
   }

  /** Constructor with InputStream. */
  public VCPU32Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public VCPU32Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new VCPU32ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public VCPU32Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new VCPU32ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public VCPU32Parser(VCPU32ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(VCPU32ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    Token t = tok;
    int nbt = 0;
    while (t.specialToken != null) {
      t = t.specialToken;
      nbt++;
    }
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>(nbt);
    t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = nbt - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    // node.trimSpecials();
    return node;
  }
}
