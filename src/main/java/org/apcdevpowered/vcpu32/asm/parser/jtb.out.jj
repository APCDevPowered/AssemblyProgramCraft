/* Generated by JTB 1.4.9 */
/**
 * JavaCC VCPU32Parser file created by yuxuanchiadm
 */
options
{
JDK_VERSION = "1.7";
  UNICODE_INPUT = true;
  STATIC = false;
  DEBUG_PARSER = false;
  TOKEN_FACTORY = "org.apcdevpowered.vcpu32.asm.TokenFactory";
    // JTB_P   // =   // "org.apcdevpowered.vcpu32.asm.parser"  // ;
    // JTB_F   // =   // true  // ;
}

PARSER_BEGIN(VCPU32Parser)
package org.apcdevpowered.vcpu32.asm.parser;

import java.io.StringReader;
import org.apcdevpowered.vcpu32.asm.parser.visitor.*;
import org.apcdevpowered.vcpu32.asm.parser.syntaxtree.*;


public class VCPU32Parser {

  /* --- User code --- */

  public static AbstractSyntaxTree parser(String sourceCode) throws ParseException{
    VCPU32Parser parser = new VCPU32Parser(new StringReader(sourceCode));
    return parser.AbstractSyntaxTree();
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token tok) {
    final NodeToken node = new NodeToken(tok.image.intern(), tok.kind, tok.beginLine, tok.beginColumn, tok.endLine, tok.endColumn);
    if (tok.specialToken == null)
      return node;
    Token t = tok;
    int nbt = 0;
    while (t.specialToken != null) {
      t = t.specialToken;
      nbt++;
    }
    final java.util.ArrayList<NodeToken> temp = new java.util.ArrayList<NodeToken>(nbt);
    t = tok;
    while (t.specialToken != null) {
      t = t.specialToken;
      temp.add(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
    }
    for (int i = nbt - 1; i >= 0; --i)
      node.addSpecial(temp.get(i));
    // node.trimSpecials();
    return node;
  }
}

PARSER_END(VCPU32Parser)

SPECIAL_TOKEN :
{
  < Space : ( " "| "\r"| "\n"| "\t" )+ >
| < Annotate : ";" ( ~["\n", "\r"] )* >
}

//Identifier
TOKEN :
{
  < #Id : <Id_Letter> ( <Id_Letter>| <Id_Digit> )* >
| < #Id_Letter : ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"] >
| < #Id_Digit : ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"] >
}

TOKEN :
{
  < Opt : ( "DUP"| "SHR"| "FMOD"| "IFE"| "CRT"| "FIFA"| "XOR"| "FSUB"| "SWAP"| "SHL"| "MOD"| "IFA"| "GTH"| "GDT"| "IFU"| "FDIV"| "SUB"| "SET"| "ITF"| "FMUL"| "INS"| "AND"| "IFN"| "FTI"| "MUL"| "PUSH"| "UNMP"| "SLT"| "CLCK"| "DLCK"| "GLCK"| "RLCK"| "WLCK"| "NLCK"| "OUTS"| "MIOP"| "RET"| "STT"| "IN"| "OUT"| "FADD"| "POP"| "EXT"| "BOR"| "FIFU"| "CALL"| "ASR"| "FIFN"| "DIV"| "JSR"| "FIFE"| "ADD"| "STRAT"| "DATAT"| "DAT"| "GPL"| "GSO" ) >
| < Reg : "A"| "B"| "C"| "I"| "J"| "X"| "Y"| "Z"| "O"| "PC"| "SP" >
| < Hex : "0" ( "x"| "X" ) ( ["0"-"9", "A"-"F"] )+ >
| < Real : ( "-" )? ( ["0"-"9"] )* "." ( ["0"-"9"] )* >
| < Dec : ( "-" )? ( ( ["1"-"9"] ( ["0"-"9"] )* )| "0" ) >
| < Oct : "0" ( ["0"-"7"] )+ >
| < Bin : ( "0"| "1" )+ "B" >
| < Char : "'" ( ( "\\" ( "b"| "f"| "n"| "r"| "t"| "\""| "'"| "\\"| "u" ( ["0"-"9", "a"-"f", "A"-"F"] ){4} ) )| ~["\\", "'"] ) "'" >
| < String : "\"" ( ( "\\" ( "b"| "f"| "n"| "r"| "t"| "\""| "'"| "\\"| "u" ( ["0"-"9", "a"-"f", "A"-"F"] ){4} ) )| ~["\\", "\""] )* "\"" >
| < Label : <Id> >
| < LabelBegin : ":" >
| < MemBegin : "[" >
| < MemEnd : "]" >
| < Comma : "," >
}

AbstractSyntaxTree AbstractSyntaxTree() :
{
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  StmList n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  (
    n1 = StmList()
    { n0.addNode(n1); }
  )?
  n3 = < EOF >
  {
    n3.beginColumn++;
    n3.endColumn++;
    { n2 = JTBToolkit.makeNodeToken(n3); }
  }
  { return new AbstractSyntaxTree(n0, n2); }
}

StmList StmList() :
{
  // --- JTB generated node declarations ---
  Stm n0 = null;
  NodeOptional n1 = new NodeOptional();
  StmList n2 = null;
}
{
  n0 = Stm()
  (
    {
      if (token.next == null) {
        token.next = token_source.getNextToken();
      }
      Token specialToken = token.next.specialToken;
      if (specialToken == null || specialToken.kind != Space) {
        int[][] exptokseq = new int[][]{ { Space } };
        throw new ParseException(token, exptokseq, tokenImage);
      }
    }
    n2 = StmList()
    { n1.addNode(n2); }
  )?
  { return new StmList(n0, n1); }
}

Stm Stm() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Insn n1 = null;
  LabelDef n2 = null;
}
{
  (
    n1 = Insn()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = LabelDef()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new Stm(n0); }
}

Insn Insn() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  ParList n3 = null;
}
{
  n1 = < Opt >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    {
      if (token.next == null) {
        token.next = token_source.getNextToken();
      }
      Token specialToken = token.next.specialToken;
      if (specialToken == null || specialToken.kind != Space) {
        int[][] exptokseq = new int[][]{ { Space } };
        throw new ParseException(token, exptokseq, tokenImage);
      }
    }
    n3 = ParList()
    { n2.addNode(n3); }
  )?
  { return new Insn(n0, n2); }
}

LabelDef LabelDef() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  n1 = < LabelBegin >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < Label >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  { return new LabelDef(n0, n2); }
}

ParList ParList() :
{
  // --- JTB generated node declarations ---
  Par n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ParList n5 = null;
}
{
  n0 = Par()
  (
    { n2 = new NodeSequence(2); }
    n4 = < Comma >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n2.addNode(n3); }
    n5 = ParList()
    { n2.addNode(n5); }
    { n1.addNode(n2); }
  )?
  { return new ParList(n0, n1); }
}

Par Par() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeChoice n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeToken n33 = null;
  Token n34 = null;
}
{
  (
    n2 = < Dec >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0 = new NodeChoice(n1, 0, 10); }
  |
    n4 = < Hex >
    { n3 = JTBToolkit.makeNodeToken(n4); }
    { n0 = new NodeChoice(n3, 1, 10); }
  |
    n6 = < Oct >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n0 = new NodeChoice(n5, 2, 10); }
  |
    n8 = < Bin >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n0 = new NodeChoice(n7, 3, 10); }
  |
    n10 = < Reg >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n0 = new NodeChoice(n9, 4, 10); }
  |
    { n11 = new NodeSequence(3); }
    n13 = < MemBegin >
    { n12 = JTBToolkit.makeNodeToken(n13); }
    { n11.addNode(n12); }
    (
      (
        n16 = < Reg >
        { n15 = JTBToolkit.makeNodeToken(n16); }
        { n14 = new NodeChoice(n15, 0, 5); }
      |
        n18 = < Dec >
        { n17 = JTBToolkit.makeNodeToken(n18); }
        { n14 = new NodeChoice(n17, 1, 5); }
      |
        n20 = < Hex >
        { n19 = JTBToolkit.makeNodeToken(n20); }
        { n14 = new NodeChoice(n19, 2, 5); }
      |
        n22 = < Oct >
        { n21 = JTBToolkit.makeNodeToken(n22); }
        { n14 = new NodeChoice(n21, 3, 5); }
      |
        n24 = < Bin >
        { n23 = JTBToolkit.makeNodeToken(n24); }
        { n14 = new NodeChoice(n23, 4, 5); }
      )
          )
    { n11.addNode(n14); }
    n26 = < MemEnd >
    { n25 = JTBToolkit.makeNodeToken(n26); }
    { n11.addNode(n25); }
    { n0 = new NodeChoice(n11, 5, 10); }
  |
    n28 = < String >
    { n27 = JTBToolkit.makeNodeToken(n28); }
    { n0 = new NodeChoice(n27, 6, 10); }
  |
    n30 = < Char >
    { n29 = JTBToolkit.makeNodeToken(n30); }
    { n0 = new NodeChoice(n29, 7, 10); }
  |
    n32 = < Label >
    { n31 = JTBToolkit.makeNodeToken(n32); }
    { n0 = new NodeChoice(n31, 8, 10); }
  |
    n34 = < Real >
    { n33 = JTBToolkit.makeNodeToken(n34); }
    { n0 = new NodeChoice(n33, 9, 10); }
  )
  { return new Par(n0); }
}
