—————————————————————————+—————+—————————————————————————
                                                  | VCPU-32  |
—————————————————————————+—————+—————————————————————————

（注：10进制数字为带符号整形，16进制则为无符号整形（直接表示内存状态）（0x0 = 0，0x7FFFFFFF = 2147483647，0x80000000 = -2147483648））
（注：内存静态储存区储存的字符串为UTF-8格式，支持中文，应在程序的任何部分使用UTF-8格式的字符串）
（注：可用内存的寻址地址从0x0000到0xFFFF，不可以越界，否则当前线程将直接终止）
（注：机器指令一操作符最多4个参数）
（注：伪指令不限操作符参数上限）
（注：伪指令为一指令定义多个机器码或未定义机器码，而修改程序数据的指令）
（注：伪指令只能使用已存在数据类型进行处理，不可自定义数据类型）
（注：编译器应为伪指令提供扩展接口，回调函数）
（注：拥有静态储存段区，主要用于储存字符串，程序不可直接写入（严谨模式））
（注：外设提供可扩展的API）
（注：提供映射功能，可以把外置设备的内存映射到主存，主存映射时，每一帧只能映射一个IO设备的内存帧。但多个主存帧可以映射一个IO设备的内存帧）
（注：8bits=1Byte, 1024Bytes=1KB, 1024KB=1MB, 1024MB=1GB, 1024GB=1TB......）
（注：1024bits=1Kb, 1024Kb=1Mb, 1024Mb=1Gb, 1024Gb= 1Tb......）
（注：虚拟机寻址方式为双字寻址，即32位寻址）
（注：定义双字（32位）或单个虚拟机寻址单位为（单）帧）
（注：定义2帧（64位）为双帧）
（注：帧英文写作slot）
（注：主内存256KB）
（注：同一时间内虚拟机可能会执行多个线程，具体取决于物理机CPU是否为多核CPU）
（注：一线程观察自己的执行流程时总是有序的，而观察其他线程的执行流程总是无序的）
（注：虚拟机的所有指令均不是原子的，如果在程序运行时动态更改程序内容，那么需注意VCPU-32从内存读取指令的操作也不是原子的）
（注：当前栈指时间顺序上从一个CALL指令到一个RET指令间存在的栈，调用CALL时创建，调用RET时销毁）
（注：栈不使用虚拟机内存，栈是另外一块线程私有的存储区域，在物理机允许的情况下，栈永远不会溢出）
（注：虚拟机不会因为所有线程终止而终止，你可以在所有线程都终止的虚拟机中创建新的线程）

内存分配表：
————————+——————————————————
      内存      | 说明
————————+——————————————————    —+
     0 - 3071   | 代码段                                   |-存放程序代码
————————+——————————————————    —+
  3072 - 7167   | 静态储存区                               |-储存字符串和其他数据，由编译器编译时修改其中的内容，不应该对其进行修改
————————+——————————————————    —+
  7168 - 8191   | BIOS预留                                 |-存放所有BIOS程序代码及BIOS数据
————————+——————————————————    —+
  8192 - 65535  | 自由内存                                 |-程序可以自由使用的内存，还可以映射IO端口
————————+——————————————————    —+

通用寄存器：A、B、C、X、Y、Z、I、J
运算溢出寄存器：O（溢出时值被改变）
程序指针寄存器：PC（在读取一条指令后自动指向下一条指令，然后运行读取的指令）（注意是先指向下一指令再运行当前指令）
栈指针寄存器：SP
（注意：多线程程序中，每个线程无论通用寄存器还是O、PC、SP寄存器都不共享）

参数类型表：
————+——————+——————————+————+————+————————————+
 无参数 | 访问寄存器 |  直接寻址访问内存  |  数值  | 字符串 | 用寄存器值寻址访问内存 |
————+——————+——————————+————+————+————————————+
  000   |     001    |         010        |  011   |   100  |          101           |
————+——————+——————————+————+————+————————————+

字符串类型所有数据都储存在静态储存区内，为UTF-8格式，在编译时放入一个伪指针。
编译时把需要压缩编码的字符串类型的数据在程序编译完成后放入程序末尾的空白内，并在每个字符串前面的1帧内加上后面字符串的长度信息（占多少个Char），并对申请字符串的帧进行覆盖。
程序启动时检查，如果BIOS+程序共申请的静态储存区内存超过4080帧，则直接退出，无法启动。
如果没有超过，则在运行时，把程序的放在前面，BIOS的放在后面，程序读取时通过第一帧判断长度，然后获取字符串。

多线程程序拥有语言级别的支持，使用汇编语言创建线程，并设置此线程的PC寄存器为特定值，并开始执行。
遇到某汇编指令后结束线程，在外部通过某些特定汇编指令对进程进行控制，使用创建时返回的句柄。
当父线程终止，子线程也终止。

机器语言格式示范：
[0x0001]命令
32-21位（FFF）      20-13位（FF）     12-1位（FFF）
   参数类型                  其他                 机器指令
[0x0002]参数1
[0x0003]参数2

寄存器代号数值：
——+————+————+—————————————————————————————
序号| 寄存器 |  数值  | 
——+————+————+—————————————————————————————
1   |   A    |  0x01  | 
——+————+————+—————————————————————————————
2   |   B    |  0x02  | 
——+————+————+—————————————————————————————
3   |   C    |  0x03  | 
——+————+————+—————————————————————————————
4   |   X    |  0x04  | 
——+————+————+—————————————————————————————
5   |   Y    |  0x05  | 
——+————+————+—————————————————————————————
6   |   Z    |  0x06  | 
——+————+————+—————————————————————————————
7   |   I    |  0x07  | 
——+————+————+—————————————————————————————
8   |   J    |  0x08  | 
——+————+————+—————————————————————————————
9   |   O    |  0x09  | 
——+————+————+—————————————————————————————
10  |   PC   |  0x0A  | 
——+————+————+—————————————————————————————
11  |   SP   |  0x0B  | 
——+————+————+—————————————————————————————

机器指令（CPU）：
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
序号| 机器指令 |   汇编指令   | 说明
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
基本操作机器指令（运算、条件）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 1  |  0x0001  | SET A,B      | 设置 A 为 B 
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 2  |  0x0002  | ADD A,B      | 设置 A 为 A 加 B 
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 3  |  0x0003  | SUB A,B      | 设置 A 为 A 减 B 
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 4  |  0x0004  | MUL A,B      | 设置 A 为 A 乘 B
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 5  |  0x0005  | DIV A,B      | 设置 A 为 A 除以 B（B为0则寄存器O第1位为1）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 6  |  0x0006  | MOD A,B      | 设置 A 为 A 除以 B 的余数（B为0则寄存器O第1位为1）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 7  |  0x0007  | AND A,B      | 设置 A 为 A 按位与 B （位都为1结果位才为1）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 8  |  0x0008  | BOR A,B      | 设置 A 为 A 按位或 B （任意一位为1结果位就为1）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 9  |  0x0009  | XOR A,B      | 设置 A 为 A 按位异或 B （不同位为1，同位为0）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 10 |  0x000a  | SHR A,B      | 设置 A 为 A 添零按位右移 B 位
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 11 |  0x000b  | ASR A,B      | 设置 A 为 A 按位右移 B 位
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 12 |  0x000c  | SHL A,B      | 设置 A 为 A 按位左移 B 位
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 13 |  0x000d  | IFE A,B      | 当 A 等于 B 时执行下一条指令，否则跳过
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 14 |  0x000e  | IFN A,B      | 当 A 不等于 B 时执行下一条指令，否则跳过
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 15 |  0x000f  | IFA A,B      | 当 A 大于 B 时执行下一条指令，否则跳过
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 16 |  0x0010  | IFU A,B      | 当 A 小于 B 时执行下一条指令，否则跳过
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————

高级指令（AdvCPU）：
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
序号| 机器指令 |   汇编指令   | 说明
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
无条件跳转
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 1  |  0x0011  | JSR A        | 无条件跳转到 A 处（标签（编译时转换为内存地址）或内存地址）等价 SET PC,A
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
线程操作机器指令
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 2  |  0x0020  | CRT A,B,C    | 创建线程，A为开始执行的位置，B为句柄的存储位置，C为线程名称（字符串或静态储存区位置，不填则为Thread + 句柄值）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 3  |  0x0021  | STT A,B      | 开始线程，A为句柄（无效寄存器O第1位为1），B为父线程句柄（不填则为独立线程，不被其他线程关闭，无效寄存器O第2位为1）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 4  |  0x0022  | GTH A        | 获得当前线程句柄，A为句柄的存储位置
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 5  |  0x0023  | EXT A        | 终止线程，A为句柄（不填则为当前线程，无效寄存器O第1位为1）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 6  |  0x0024  | SLT A        | 让当前线程睡眠A毫秒（小于0则寄存器O第1位为1），并让其他线程执行（不阻塞）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 7  |  0x0025  | CLCK A       | 创建监视器并将其句柄存储于A位置
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 8  |  0x0026  | DLCK A       | 根据监视器句柄A（句柄无效寄存器O第1位为1）删除监视器（若有线程正在使用此监视器或在此监视器上等待或阻塞则寄存器O第2位为1）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 9  |  0x0027  | GLCK A       | 根据监视器句柄A获取监视器的锁（句柄无效寄存器O第1位为1）（如果多次获取同一监视器的锁，则也要释放同样次数才能完全释放监视器锁）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 10 |  0x0028  | RLCK A       | 根据监视器句柄A释放监视器的锁（句柄无效寄存器O第1位为1）（如果当前线程不持有监视器的锁则寄存器O第2位为1）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 11 |  0x0029  | WLCK A,B     | 释放在监视器A（句柄无效寄存器O第1位为1）（如果当前线程不是此监视器的所有者则寄存器O第2位为1）上的锁并等待其他线程唤醒，最多等待B毫秒（不填为无限等待，小于0为无限等待）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 12 |  0x0030  | NLCK A,B     | 唤醒在监视器A（句柄无效寄存器O第1位为1）（如果当前线程不是此监视器的所有者则寄存器O第2位为1）上等待的最多B个线程（不填为唤醒1个，小于等于0则为唤醒所有线程）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
IO端口操作指令
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 13 |  0x0040  | IN A,B,C     | 获得A输入输出端口上的B位置的值，并存入C位置。
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 14 |  0x0041  | OUT A,B,C    | 设置A输入输出端口上的B位置的值为C。
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 15 |  0x0042  | INS A,B,C,D  | 获得A输入输出端口上的B位置开始，C个位置（包括B）的所有值，并存入以D位置为起始处的C个位置（包括D）。
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 16 |  0x0043  | OUTS A,B,C,D | 设置A输入输出端口上的B位置开始，C个位置（包括B）的所有值，为以D位置为起始处的C个位置（包括D）。
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 17 |  0x0044  | MIOP A,B,C,D | 映射A输入输出端口上的B位置到B后C个位置的所有帧到以D帧位置开头的内存，如果无法容纳、操作，则设置寄存器O第1位为1，默认只能映射在自由内存，并设置其中的值为IO设备上的值。
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 18 |  0x0045  | UNMP A       | 取消映射内存第A帧所在位置的IO端口映射，并清空其中内存的值，如果无法操作，则设置寄存器O第1位为1。
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 19 |  0x0046  | GDT A,B      | 获取A端口上设备的类型，并存入B位置。（没有设备时返回0）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
栈操作指令
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 20 |  0x0050  | PUSH A       | 把A压入当前栈的栈顶
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 21 |  0x0051  | POP A        | 弹出当前栈的栈顶到A（不填则为丢弃）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 22 |  0x0052  | DUP A        | 复制A个栈顶数值并压入栈顶（不填则为1个）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 23 |  0x0053  | SWAP         | 互换栈顶的两个数值
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
子程序操作指令
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 24 |  0x0060  | CALL A,B     | 从A处开始执行子程序（PC赋值为A），并将栈顶B个数值（小于0则寄存器O第1位为1）移动（删除自身栈顶B个数值）到子程序的栈顶（不填则为不复制）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 25 |  0x0061  | RET A        | 将子程序栈顶A个数值（小于0则寄存器O第1位为1）压入父程序的栈顶（不填则为不复制），并转到父程序（PC赋值为returnAddress）。如果尝试在顶级栈调用此指令，则当前线程终止，但仍会尝试先弹出栈顶A个数值
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 26 |  0x0062  | GPL A,B      | 获取指定子程序的参数长度，并存储到A位置。参数B为正数或0从顶帧栈向后索引B个帧栈，为负数则从底帧栈向前索引B+1个帧栈（索引越界则寄存器O第1位为1）（不填则为顶帧栈）
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
数值转换指令
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 26 |  0x0070  | ITF A,B      | 把整数A转换为浮点数，并存入B
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 27 |  0x0071  | FTI A,B      | 把浮点数A转换为整数，并存入B
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————

浮点数指令（FPU）：
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
序号| 机器指令 |   汇编指令   | 说明
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
浮点运算指令
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 1  |  0x0080  | FADD A,B     | 设置 A 为浮点数 A 加 B 
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 2  |  0x0081  | FSUB A,B     | 设置 A 为浮点数 A 减 B 
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 3  |  0x0082  | FMUL A,B     | 设置 A 为浮点数 A 乘 B
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 4  |  0x0083  | FDIV A,B     | 设置 A 为浮点数 A 除以 B，B为0则A不变，寄存器O第1位为1
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 5  |  0x0084  | FMOD A,B     | 设置 A 为浮点数 A 除以 B 的余数，B为0则A不变，寄存器O第1位为1
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
浮点比较指令
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 6  |  0x0090  | FIFE A,B     | 当浮点数 A 等于 B 时执行下一条指令，否则跳过
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 7  |  0x0091  | FIFN A,B     | 当浮点数 A 不等于 B 时执行下一条指令，否则跳过
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 8  |  0x0092  | FIFA A,B     | 当浮点数 A 大于 B 时执行下一条指令，否则跳过
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————
 9  |  0x0093  | FIFU A,B     | 当浮点数 A 小于 B 时执行下一条指令，否则跳过
——+—————+———————+—————————————————————————————————————————————————————————————————————————————————————————————————

伪指令（编译器指令）：
——+———————+—————————————————————————————————————————————————————————————————————————————————————
序号|   汇编指令   | 说明
——+———————+—————————————————————————————————————————————————————————————————————————————————————
数据定义
——+———————+—————————————————————————————————————————————————————————————————————————————————————
 1  | DAT A,B...   | 定义字符串或者单帧数据到静态储存区，并将索引存入A位置，如果为字符串则不使用原处理，字符串不进行压缩编码且不包含字符串长度，将编译出一条SET指令
——+———————+—————————————————————————————————————————————————————————————————————————————————————
 2  | DATAT A,B... | 定义字符串或者单帧数据到静态储存区偏移量（普通：3072，BIOS：程序结束+0xF）+A的位置，如果为字符串则不使用原处理，字符串不进行压缩编码且不包含字符串长度，覆盖其他DAT数据
——+———————+—————————————————————————————————————————————————————————————————————————————————————
 3  | STRAT A,B    | 限定特定字符串B定义在静态储存区偏移量（普通：3072，BIOS：程序结束+0xF）+A的位置，压缩编码字符串，覆盖其他DAT数据
——+———————+—————————————————————————————————————————————————————————————————————————————————————
 4  | GSO A        | 获取当前程序的静态储存区偏移量，并存入A位置，将编译出一条SET指令
——+———————+—————————————————————————————————————————————————————————————————————————————————————

by yuxuanchiadm