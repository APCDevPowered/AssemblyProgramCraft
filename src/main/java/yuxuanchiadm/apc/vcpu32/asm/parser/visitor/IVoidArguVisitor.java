/* Generated by JTB 1.4.7 */
package yuxuanchiadm.apc.vcpu32.asm.parser.visitor;

import yuxuanchiadm.apc.vcpu32.asm.parser.syntaxtree.*;

/**
 * All "VoidArgu" visitors must implement this interface.
 * @param <A> - The user argument type
 */
@SuppressWarnings("all")
public interface IVoidArguVisitor<A> {

  /*
   * Base "VoidArgu" visit methods
   */

  /**
   * Visits a {@link NodeChoice} node, passing it an argument.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final NodeChoice n, final A argu);

  /**
   * Visits a {@link NodeList} node, passing it an argument.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final NodeList n, final A argu);

  /**
   * Visits a {@link NodeListOptional} node, passing it an argument.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final NodeListOptional n, final A argu);

  /**
   * Visits a {@link NodeOptional} node, passing it an argument.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final NodeOptional n, final A argu);

  /**
   * Visits a {@link NodeSequence} node, passing it an argument.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final NodeSequence n, final A argu);

  /**
   * Visits a {@link NodeTCF} node, passing it an argument.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final NodeTCF n, final A argu);

  /**
   * Visits a {@link NodeToken} node, passing it an argument.
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final NodeToken n, final A argu);

  /*
   * User grammar generated visit methods
   */

  /**
   * Visits a {@link AbstractSyntaxTree} node, whose children are the following :
   * <p>
   * nodeOptional -> ( StmList() )?<br>
   * nodeToken -> <EOF><br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final AbstractSyntaxTree n, final A argu);

  /**
   * Visits a {@link StmList} node, whose children are the following :
   * <p>
   * stm -> Stm()<br>
   * nodeOptional -> ( StmList() )?<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final StmList n, final A argu);

  /**
   * Visits a {@link Stm} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 Insn()<br>
   * .......... .. | %1 LabelDef()<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final Stm n, final A argu);

  /**
   * Visits a {@link Insn} node, whose children are the following :
   * <p>
   * nodeToken -> <Opt><br>
   * nodeOptional -> ( ParList() )?<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final Insn n, final A argu);

  /**
   * Visits a {@link LabelDef} node, whose children are the following :
   * <p>
   * nodeToken -> <LabelBegin><br>
   * nodeToken1 -> <Label><br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final LabelDef n, final A argu);

  /**
   * Visits a {@link ParList} node, whose children are the following :
   * <p>
   * par -> Par()<br>
   * nodeOptional -> ( #0 <Comma> #1 ParList() )?<br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final ParList n, final A argu);

  /**
   * Visits a {@link Par} node, whose children are the following :
   * <p>
   * nodeChoice -> . %0 <Dec><br>
   * .......... .. | %1 <Hex><br>
   * .......... .. | %2 <Oct><br>
   * .......... .. | %3 <Bin><br>
   * .......... .. | %4 <Reg><br>
   * .......... .. | %5 #0 <MemBegin><br>
   * .......... .. . .. #1 ( &0 <Reg><br>
   * .......... .. . .. .. | &1 <Dec><br>
   * .......... .. . .. .. | &2 <Hex><br>
   * .......... .. . .. .. | &3 <Oct><br>
   * .......... .. . .. .. | &4 <Bin> )<br>
   * .......... .. . .. #2 <MemEnd><br>
   * .......... .. | %6 <String><br>
   * .......... .. | %7 <Char><br>
   * .......... .. | %8 <Label><br>
   * .......... .. | %9 <Real><br>
   *
   * @param n - the node to visit
   * @param argu - the user argument
   */
  public void visit(final Par n, final A argu);

}
